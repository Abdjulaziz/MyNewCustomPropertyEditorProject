{"version":3,"file":"random-string-generator-property-editor-ui.element-CU5nRpuH.js","sources":["../../../Client/src/randomStringGenerator/random-string-generator-property-editor-ui.element.ts"],"sourcesContent":["import { LitElement, css, html, customElement, property } from \"@umbraco-cms/backoffice/external/lit\";\r\nimport { UmbPropertyEditorUiElement } from \"@umbraco-cms/backoffice/property-editor\";\r\nimport { UmbPropertyValueChangeEvent } from \"@umbraco-cms/backoffice/property-editor\";\r\n\r\n@customElement(\"my-random-string-generator\")\r\nexport default class MyRandomStringGenerator extends LitElement implements UmbPropertyEditorUiElement {\r\n  @property({ type: String }) public value = \"\";\r\n  @property({ type: Number }) maxLength = 32;\r\n  @property({ type: String }) errorMessage = \"\";\r\n  @property({ type: Array }) private selectedCharacterSets: string[] = [\"Lowercase letters (a-z)\"];\r\n\r\n  characterOptions = {\r\n    \"Numeric digits (0-9)\": \"0123456789\",\r\n    \"Uppercase letters (A-Z)\": \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\r\n    \"Lowercase letters (a-z)\": \"abcdefghijklmnopqrstuvwxyz\",\r\n    \"Symbols\": \"!@#$%^&*()_+{}|:\\\"<>?-= [];',./`~\",\r\n  };\r\n\r\n  #onInput(e: InputEvent) {\r\n    this.value = (e.target as HTMLInputElement).value;\r\n    this.#dispatchChangeEvent();\r\n  }\r\n\r\n  #onCheckboxChange(e: Event) {\r\n    const target = e.target as HTMLInputElement;\r\n    const value = target.value;\r\n\r\n    if (target.checked) {\r\n      this.selectedCharacterSets = [...this.selectedCharacterSets, value];\r\n    } else {\r\n      this.selectedCharacterSets = this.selectedCharacterSets.filter((set) => set !== value);\r\n    }\r\n  }\r\n\r\n  #onLengthChange(e: InputEvent) {\r\n    const length = parseInt((e.target as HTMLInputElement).value, 10);\r\n    if (isNaN(length) || length < 1) {\r\n      this.maxLength = 1;\r\n      this.errorMessage = \"Length must be at least 1\";\r\n    } else if (length > 32) {\r\n      this.maxLength = 32;\r\n      this.errorMessage = \"Max length is 32\";\r\n    } else {\r\n      this.maxLength = length;\r\n      this.errorMessage = \"\";\r\n    }\r\n  }\r\n\r\n  #generateRandomString() {\r\n    if (this.errorMessage) return;\r\n\r\n    let characterPool = this.selectedCharacterSets\r\n      .map((set) => this.characterOptions[set as keyof typeof this.characterOptions])\r\n      .join(\"\");\r\n\r\n    if (!characterPool) characterPool = this.characterOptions[\"Lowercase letters (a-z)\"];\r\n\r\n    return Array.from({ length: this.maxLength }, () =>\r\n      characterPool.charAt(Math.floor(Math.random() * characterPool.length))\r\n    ).join(\"\");\r\n  }\r\n\r\n  #onGenerate() {\r\n    if (!this.errorMessage) {\r\n      this.value = this.#generateRandomString();\r\n      this.#dispatchChangeEvent();\r\n    }\r\n  }\r\n\r\n  #dispatchChangeEvent() {\r\n    this.dispatchEvent(new UmbPropertyValueChangeEvent());\r\n  }\r\n\r\n  render() {\r\n    return html`\r\n    <uui-label\">Charecter legth</uui-label>\r\n      <uui-input\r\n        label=\"Length\"\r\n        placeholder=\"Enter length (max 32)\"\r\n        type=\"number\"\r\n        min=\"1\"\r\n        max=\"32\"\r\n        .value=${this.maxLength}\r\n        @input=${this.#onLengthChange}\r\n        ?error=${this.errorMessage !== \"\"}\r\n          style=\"width: 100px;\"\r\n      ></uui-input>\r\n      ${this.errorMessage ? html`<p style=\"color: red;\">${this.errorMessage}</p>` : \"\"}\r\n\r\n      <fieldset style=\"border: none;\">\r\n        <legend>Allowed Characters</legend>\r\n        <ul style=\"list-style: none; margin: 0;\">\r\n          ${Object.keys(this.characterOptions).map(\r\n      (key) => html`\r\n              <li>\r\n                <uui-checkbox\r\n                  .checked=${this.selectedCharacterSets.includes(key)}\r\n                  @change=${this.#onCheckboxChange}\r\n                  value=${key}\r\n                  label=${key}\r\n                >\r\n                  ${key}\r\n                </uui-checkbox>\r\n              </li>\r\n            `\r\n    )}\r\n        </ul>\r\n      </fieldset>\r\n\r\n      <uui-input-lock\r\n        id=\"random-string-input\"\r\n        label=\"Random String\"\r\n        .value=${this.value || \"\"}\r\n        @input=${this.#onInput}\r\n         style=\"width: 300px;\"\r\n      ></uui-input-lock>\r\n\r\n      <div id=\"wrapper\">\r\n        <uui-button\r\n          look=\"primary\"\r\n          label=\"Generate Random String\"\r\n          @click=${this.#onGenerate}\r\n          ?disabled=${this.errorMessage !== \"\"}\r\n          style=\"width: auto;\"\r\n        >\r\n          Generate Random String\r\n        </uui-button>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  static styles = css`\r\n    #wrapper {\r\n      margin-top: 10px;\r\n      display: flex;\r\n      gap: 10px;\r\n    }\r\n    .element {\r\n      width: 100%;\r\n    }\r\n  `;\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    \"my-random-string-generator\": MyRandomStringGenerator;\r\n  }\r\n}\r\n"],"names":["_MyRandomStringGenerator_instances","onInput_fn","onCheckboxChange_fn","onLengthChange_fn","generateRandomString_fn","onGenerate_fn","dispatchChangeEvent_fn","MyRandomStringGenerator","LitElement","__privateAdd","html","__privateMethod","key","target","value","set","length","characterPool","UmbPropertyValueChangeEvent","css","__decorateClass","property","customElement"],"mappings":"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"}